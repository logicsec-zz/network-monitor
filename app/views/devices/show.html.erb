<main class="mt-5 px-4">
  <div class="page-header">
  	<div class="pull-right">
  		<h3 id="link-status"><%= @device.status %></h3>
  		<small>Link Staus</small>
  	</div>
  	<h1><%= @device.sys_name %></h1>
  	<h5><%= @device.ip %></h5>
  </div>

  <div class="row">
  </div>

  <div>
  	<%= link_to "Edit", edit_device_path(@device), :class => "btn btn-default" %>
  	<%= link_to "Delete", device_path(@device), method: :delete, :prompt => "Are you sure?", :class => "btn btn-danger" %>
  </div>

  <%= javascript_include_tag "jquery.flot" %>
  <%= javascript_include_tag "jquery.flot.resize" %>
  <%= javascript_include_tag "jquery.flot.stack" %>
  <!-- <script type="text/javascript">
  	var run_path = "<%= run_path @device,:format => :json %>";
  	var last_request = null;
  	var max_items = 20;
  	var link_loaded = false;

  	// Compare var and data
  	function diff(var_name,data){
  		if(last_request == null) return 0;
  		else return data[var_name] - last_request[var_name];
  	}

  	// Plotting data base function
  	var pos = 0;
  	function plot_lineChart(target_id,inn,out){
  		var ticks = []; for(var x=1;x<=max_items;x++) ticks.push([x+pos,(x+pos).toString()]);
  		$.plot($(target_id),
  			[ { data: inn, label: "In"}, { data: out, label: "Out" }],
  			{
  				series: {
            shadowSize: 0,
            lines: { show: true, lineWidth: 1, fill: true,
              fillColor: { colors: [ { opacity: 0.05 },
                { opacity: 0.09 } ]}},
          points: { show: true, lineWidth: 2, radius: 3 },
          shadowSize: 0,
          stack: true,
          borderWidth: 2,
          borderColor: "#EAEAEA" },
          grid: { hoverable: true, clickable: true, tickColor: "#eaeaea", borderWidth: 1, borderColor: "#EAEAEA" },
        	legend: { labelBoxBorderColor: "#fff" },
          colors: ["green", "#30a0eb"],
  					xaxis: {
  						ticks: ticks,
  						font: { size: 12, family: "Open Sans, Arial", variant: "small-caps", color: "#9da3a9" } },
            yaxis: {
             	ticks:3, tickDecimals: 0, font: {size:12, color: "#9da3a9"}}
  		});
  		pos++;
  	}

  	// HTML for Charts
  	function load_LINK(data){
      console.log(data);
  		var content = "";
  		var is = data["IF-MIB::ifNumber.0"];
  		for(var i=1;i<=is;i++){
  			content += "<div class='col-md-12'>";
  			content += "<h4 class='title pull-left'>";
  			content += "	Link "+data["IF-MIB::ifDescr."+i]+" <small>IN and OUT</small>";
  	  	content += "</h4>";
  	  	content += "<div class='span6'>";
  	  	content += "	<div id='link-in-out-"+i+"' class='line-chart'></div>";
  			content += "</div>";
  			content += "</div>";
  		}
  		$("#link_graphs").html(content);
  		link_loaded = true;
  	}

    // Update function for charts
  	var link_in = {};
  	var link_out = {};
  	function update_LINK(data,freq){
  		var content = "";
  		var is = data["IF-MIB::ifNumber.0"];
  		for(var i=1;i<=is;i++){
  			if(link_in[i] == undefined) link_in[i] = [];
  			if(link_out[i] == undefined) link_out[i] = [];
  		}
  		for(var i=1;i<=is;i++){
  			link_in[i].push([pos,diff("IF-MIB::ifInOctets."+i,data)]);
  			link_out[i].push([pos,diff("IF-MIB::ifOutOctets."+i,data)]);
  			if(link_in[i].length == max_items){
  				link_in[i].shift();
  				link_out[i].shift();
  			}
  		}
  		//console.log(link_in);
  		//console.log(link_out);
  		for(var i=1;i<=is;i++)
  			plot_lineChart("#link-in-out-"+i,link_in[i],link_out[i]);
  	}



  	// IP Traffic
  	var ip_in = [];
  	var ip_out = [];

  	function updateIP_INOUT(inn,out){
  		ip_in.push([pos,inn]);
  		ip_out.push([pos,out]);
  		if(ip_in.length == max_items){
  			ip_in.shift();
  			ip_out.shift();
  		}
  		plot_lineChart("#ip-in-out",ip_in,ip_out);
  	}

  	// HTML For Datatable
  	function config_Table(data){
  		$("#config_table").html("");
  		var table = "";
  		$.each(data["config_table"],function(key,obj){
  			table += "<tr><td class='title'>"+key+"</td><td>"+obj+"</td></tr>";
  		});
  		$("#config_table").html(table);
  	}

  	// Device Interfaces
  	function update_Interfaces(data){
  		var is = data["IF-MIB::ifNumber.0"];
  		var content = "";
  		var items = [
  			"ifType",
  			"ifMtu",
  			"ifSpeed",
  			"ifOperStatus",
  			"ifInOctets",
  			"ifInErrors",
  			"ifOutOctets",
  			"ifOutErrors"
  		];
  		for(var i=0;i<is;i++){
  			content += "<h3>Interface "+data["IF-MIB::ifDescr."+(i+1)]+"</h3>";
  			content += "<table id='interfaces_control' class='table table-bordered table-rounded'>";
  			for(var ii=0;ii < items.length; ii++){
  				content += "<tr><td>"+items[ii]+"</td><td>"+data["IF-MIB::"+items[ii]+"."+(i+1)]+"</td></tr>";
  			}
  			content += "</table>";
  		}
  		$("#interfaces_control").html(content);
  	}

    // Update Wrapper Function
  	function update(data){
  		//console.log(data);

      // TODO: Allow these to update database instead of just updating the interface.
  		//update_LINK(data,<%= @device.frequency %>);
  		//updateIP_INOUT(diff("IP-MIB::ipInReceives.0",data),diff("IP-MIB::ipOutRequests.0",data));
  		//updateTCP_INOUT(diff("TCP-MIB::tcpInSegs.0",data),diff("TCP-MIB::tcpOutSegs.0",data));
  		//updateUDP_INOUT(diff("UDP-MIB::udpInDatagrams.0",data),diff("UDP-MIB::udpOutDatagrams.0",data));
  		//updateICMP_INOUT(diff("IP-MIB::icmpInMsgs.0",data),diff("IP-MIB::icmpOutMsgs.0",data));
  		//config_Table(data);
  		//update_Interfaces(data);
  		last_request = data;
  	}

    //Link last_status
    // TODO: Update Database Field
  	var last_status = true;

  	function link_status(bool){
  		if(bool){
  			$("#link-status").css("color","green").html("Up <i class='glyphicon glyphicon-arrow-up'></i>");
  		} else {
  			$("#link-status").css("color","red").html("Down <i class='glyphicon glyphicon-arrow-down'></i>");
  		}
  		last_status = bool;
  	}

    // realtime Update Loop
  	function run(){
  		try{
  			$.getJSON(run_path,function(data){
  				//link_status(true);
  				if(link_loaded == false) load_LINK(data);
  				update(data);
  			});
  		} catch(err){
  			//link_status(false);
  			console.log(err);
  		}
  	}

    // Interval to Run `this.run`
  	$(function(){
      console.log(<%= @device.status %>)
  		setInterval(run,<%=@device.frequency%>*1000);
  		$(document).ajaxError(function(event,request,settings){
  			link_status(false);
  		});
  	});
  </script> -->
</main>
